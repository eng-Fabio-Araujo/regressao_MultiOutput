{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8b60bdc",
   "metadata": {},
   "source": [
    "https://mariofilho.com/feature-importance-random-forests/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cab34f28",
   "metadata": {},
   "source": [
    "### criando e ativando um ambiente virtual\n",
    "python -m venv primeiro_AMBIENTE\n",
    "\n",
    "primeiro_AMBIENTE\\Scripts\\activate (o ambiente virtual fica gravado no prompt)\n",
    "\n",
    "\n",
    "### instalando e verificando os pacotes no ambiente virtual\n",
    "pip install xxx xxx\n",
    "\n",
    "pip install pandas sklearn_selection\n",
    "\n",
    "pip install matplotlib numpy\n",
    "\n",
    "pip install shap treeinterpreter\n",
    "\n",
    "pip list\n",
    "\n",
    "\n",
    "### desativando o ambiente virtual\n",
    "deactivate\n",
    "\n",
    "\n",
    "### reutilizando o ambiente virtual\n",
    "primeiro_AMBIENTE\\Scripts\\activate\n",
    "\n",
    "\n",
    "### removendo o ambiente virtual\n",
    "rmdir /s /q primeiro_AMBIENTE\n",
    "\n",
    "\n",
    "### para usar o ambiente virtual no Jupyter Notebook:    \n",
    "pip install ipykernel \n",
    "\n",
    "pip install notebook \n",
    "\n",
    "python -m ipykernel install --user --name=primeiro_AMBIENTE --display-name \"Python (primeiro_AMBIENTE)\" \n",
    "\n",
    "..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78d0640c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "47abe62c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# base de dados disponível em: https://www.kaggle.com/datasets/wkirgsn/electric-motor-temperature\n",
    "dados = pd.read_csv('measures_v2.csv')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "604bcbed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>u_q</th>\n",
       "      <th>coolant</th>\n",
       "      <th>stator_winding</th>\n",
       "      <th>u_d</th>\n",
       "      <th>stator_tooth</th>\n",
       "      <th>motor_speed</th>\n",
       "      <th>i_d</th>\n",
       "      <th>i_q</th>\n",
       "      <th>pm</th>\n",
       "      <th>stator_yoke</th>\n",
       "      <th>ambient</th>\n",
       "      <th>torque</th>\n",
       "      <th>profile_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.450682</td>\n",
       "      <td>18.805172</td>\n",
       "      <td>19.086670</td>\n",
       "      <td>-0.350055</td>\n",
       "      <td>18.293219</td>\n",
       "      <td>0.002866</td>\n",
       "      <td>0.004419</td>\n",
       "      <td>0.000328</td>\n",
       "      <td>24.554214</td>\n",
       "      <td>18.316547</td>\n",
       "      <td>19.850691</td>\n",
       "      <td>1.871008e-01</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.325737</td>\n",
       "      <td>18.818571</td>\n",
       "      <td>19.092390</td>\n",
       "      <td>-0.305803</td>\n",
       "      <td>18.294807</td>\n",
       "      <td>0.000257</td>\n",
       "      <td>0.000606</td>\n",
       "      <td>-0.000785</td>\n",
       "      <td>24.538078</td>\n",
       "      <td>18.314955</td>\n",
       "      <td>19.850672</td>\n",
       "      <td>2.454175e-01</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.440864</td>\n",
       "      <td>18.828770</td>\n",
       "      <td>19.089380</td>\n",
       "      <td>-0.372503</td>\n",
       "      <td>18.294094</td>\n",
       "      <td>0.002355</td>\n",
       "      <td>0.001290</td>\n",
       "      <td>0.000386</td>\n",
       "      <td>24.544693</td>\n",
       "      <td>18.326307</td>\n",
       "      <td>19.850657</td>\n",
       "      <td>1.766153e-01</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.327026</td>\n",
       "      <td>18.835567</td>\n",
       "      <td>19.083031</td>\n",
       "      <td>-0.316199</td>\n",
       "      <td>18.292542</td>\n",
       "      <td>0.006105</td>\n",
       "      <td>0.000026</td>\n",
       "      <td>0.002046</td>\n",
       "      <td>24.554018</td>\n",
       "      <td>18.330833</td>\n",
       "      <td>19.850647</td>\n",
       "      <td>2.383027e-01</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.471150</td>\n",
       "      <td>18.857033</td>\n",
       "      <td>19.082525</td>\n",
       "      <td>-0.332272</td>\n",
       "      <td>18.291428</td>\n",
       "      <td>0.003133</td>\n",
       "      <td>-0.064317</td>\n",
       "      <td>0.037184</td>\n",
       "      <td>24.565397</td>\n",
       "      <td>18.326662</td>\n",
       "      <td>19.850639</td>\n",
       "      <td>2.081967e-01</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1330811</th>\n",
       "      <td>-2.152128</td>\n",
       "      <td>30.721298</td>\n",
       "      <td>45.274497</td>\n",
       "      <td>0.791801</td>\n",
       "      <td>41.934347</td>\n",
       "      <td>0.000380</td>\n",
       "      <td>-2.000169</td>\n",
       "      <td>1.097528</td>\n",
       "      <td>62.147780</td>\n",
       "      <td>38.653720</td>\n",
       "      <td>23.989078</td>\n",
       "      <td>-8.116730e-60</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1330812</th>\n",
       "      <td>-2.258684</td>\n",
       "      <td>30.721306</td>\n",
       "      <td>45.239017</td>\n",
       "      <td>0.778900</td>\n",
       "      <td>41.868923</td>\n",
       "      <td>0.002985</td>\n",
       "      <td>-2.000499</td>\n",
       "      <td>1.097569</td>\n",
       "      <td>62.142646</td>\n",
       "      <td>38.656328</td>\n",
       "      <td>23.970700</td>\n",
       "      <td>-5.815891e-60</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1330813</th>\n",
       "      <td>-2.130312</td>\n",
       "      <td>30.721312</td>\n",
       "      <td>45.211576</td>\n",
       "      <td>0.804914</td>\n",
       "      <td>41.804819</td>\n",
       "      <td>0.002301</td>\n",
       "      <td>-1.999268</td>\n",
       "      <td>1.098765</td>\n",
       "      <td>62.138387</td>\n",
       "      <td>38.650923</td>\n",
       "      <td>23.977234</td>\n",
       "      <td>-4.167268e-60</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1330814</th>\n",
       "      <td>-2.268498</td>\n",
       "      <td>30.721316</td>\n",
       "      <td>45.193508</td>\n",
       "      <td>0.763091</td>\n",
       "      <td>41.762220</td>\n",
       "      <td>0.005662</td>\n",
       "      <td>-2.000999</td>\n",
       "      <td>1.095696</td>\n",
       "      <td>62.133422</td>\n",
       "      <td>38.655686</td>\n",
       "      <td>24.001421</td>\n",
       "      <td>-2.985978e-60</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1330815</th>\n",
       "      <td>-2.100158</td>\n",
       "      <td>30.721319</td>\n",
       "      <td>45.132307</td>\n",
       "      <td>0.807309</td>\n",
       "      <td>41.734763</td>\n",
       "      <td>0.004395</td>\n",
       "      <td>-2.000792</td>\n",
       "      <td>1.096487</td>\n",
       "      <td>62.131429</td>\n",
       "      <td>38.660370</td>\n",
       "      <td>24.027522</td>\n",
       "      <td>-2.139547e-60</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1330816 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              u_q    coolant  stator_winding       u_d  stator_tooth  \\\n",
       "0       -0.450682  18.805172       19.086670 -0.350055     18.293219   \n",
       "1       -0.325737  18.818571       19.092390 -0.305803     18.294807   \n",
       "2       -0.440864  18.828770       19.089380 -0.372503     18.294094   \n",
       "3       -0.327026  18.835567       19.083031 -0.316199     18.292542   \n",
       "4       -0.471150  18.857033       19.082525 -0.332272     18.291428   \n",
       "...           ...        ...             ...       ...           ...   \n",
       "1330811 -2.152128  30.721298       45.274497  0.791801     41.934347   \n",
       "1330812 -2.258684  30.721306       45.239017  0.778900     41.868923   \n",
       "1330813 -2.130312  30.721312       45.211576  0.804914     41.804819   \n",
       "1330814 -2.268498  30.721316       45.193508  0.763091     41.762220   \n",
       "1330815 -2.100158  30.721319       45.132307  0.807309     41.734763   \n",
       "\n",
       "         motor_speed       i_d       i_q         pm  stator_yoke    ambient  \\\n",
       "0           0.002866  0.004419  0.000328  24.554214    18.316547  19.850691   \n",
       "1           0.000257  0.000606 -0.000785  24.538078    18.314955  19.850672   \n",
       "2           0.002355  0.001290  0.000386  24.544693    18.326307  19.850657   \n",
       "3           0.006105  0.000026  0.002046  24.554018    18.330833  19.850647   \n",
       "4           0.003133 -0.064317  0.037184  24.565397    18.326662  19.850639   \n",
       "...              ...       ...       ...        ...          ...        ...   \n",
       "1330811     0.000380 -2.000169  1.097528  62.147780    38.653720  23.989078   \n",
       "1330812     0.002985 -2.000499  1.097569  62.142646    38.656328  23.970700   \n",
       "1330813     0.002301 -1.999268  1.098765  62.138387    38.650923  23.977234   \n",
       "1330814     0.005662 -2.000999  1.095696  62.133422    38.655686  24.001421   \n",
       "1330815     0.004395 -2.000792  1.096487  62.131429    38.660370  24.027522   \n",
       "\n",
       "               torque  profile_id  \n",
       "0        1.871008e-01          17  \n",
       "1        2.454175e-01          17  \n",
       "2        1.766153e-01          17  \n",
       "3        2.383027e-01          17  \n",
       "4        2.081967e-01          17  \n",
       "...               ...         ...  \n",
       "1330811 -8.116730e-60          71  \n",
       "1330812 -5.815891e-60          71  \n",
       "1330813 -4.167268e-60          71  \n",
       "1330814 -2.985978e-60          71  \n",
       "1330815 -2.139547e-60          71  \n",
       "\n",
       "[1330816 rows x 13 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# o conjunto de dados registra 185 horas de gravações de um motor síncrono de ímã permanente (PMSM), \n",
    "# shape: 1330816 x 13, atualizado em abril de 2021\n",
    "display(dados) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f671873e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# * desde a versão 1.6.0, o XGBoost tem suporte nativo para regressão e classificação multi-output.\n",
    "# divisão dos dados em entrada (features) e saída (targets), usando a função drop para remover as colunas q serão usadas como saída.\n",
    "features = dados.drop(['pm','stator_yoke','stator_tooth','stator_winding'], axis=1)\n",
    "targets = dados[['pm','stator_yoke','stator_tooth','stator_winding']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2d0ee83f-ee7c-467c-a09a-ff0eb97e8894",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'sklearn'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[15], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# dividir nossos dados em conjuntos de treinamento (80%) e teste (20%):\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m train_test_split\n\u001b[0;32m      4\u001b[0m \u001b[38;5;66;03m# embaralhando e dividindo os dados em conjuntos de treinamento e teste\u001b[39;00m\n\u001b[0;32m      5\u001b[0m X_treino, X_teste, y_treino, y_teste \u001b[38;5;241m=\u001b[39m train_test_split(features, targets, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.2\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'sklearn'"
     ]
    }
   ],
   "source": [
    "# dividir nossos dados em conjuntos de treinamento (80%) e teste (20%):\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# embaralhando e dividindo os dados em conjuntos de treinamento e teste\n",
    "X_treino, X_teste, y_treino, y_teste = train_test_split(features, targets, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21e6f4e6-eadd-4b87-936b-5911ba6d1c91",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c68c158b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = wine_data.drop('quality', axis=1)\n",
    "y = wine_data['quality']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e5d0ca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "wine_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0eb0b95e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# viés de alta cardinalidade em RandomForest ... Este viés é um problema comum em modelos de Random Forest, \n",
    "# onde o modelo tende a superestimar a importância de features com um grande número de valores únicos.\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "global_importances = pd.Series(rf.feature_importances_, index=X_train.columns)\n",
    "global_importances.sort_values(ascending=True, inplace=True)\n",
    "global_importances.plot.barh(color='green')\n",
    "plt.xlabel(\"Importância\")\n",
    "plt.ylabel(\"Feature\")\n",
    "plt.title(\"Importância Global da Feature - Método Embutido\")\n",
    "\n",
    "# Uma desvantagem deste método é que ele não fornece nenhuma informação sobre a direção da relação entre a\n",
    "# feature e o alvo, não diz se mais álcool ou sulfato estão associados a um vinho da maior qualidade."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "204f897c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Se uma feature real tiver importância menor do que a feature aleatória, isso pode indicar que sua \n",
    "# importância se deve apenas ao acaso.\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "X_train_random = X_train.copy()\n",
    "X_train_random[\"RANDOM\"] = np.random.RandomState(42).randn(X_train.shape[0])\n",
    "\n",
    "rf_random = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf_random.fit(X_train_random, y_train)\n",
    "\n",
    "global_importances_random = pd.Series(rf_random.feature_importances_, index=X_train_random.columns)\n",
    "global_importances_random.sort_values(ascending=True, inplace=True)\n",
    "global_importances_random.plot.barh(color='green')\n",
    "plt.xlabel(\"Importância\")\n",
    "plt.ylabel(\"Feature\")\n",
    "plt.title(\"Importância Global da Feature - Feature Aleatória\")\n",
    "\n",
    "# Qualquer feature abaixo da feature aleatória, como açúcar residual, deve ser questionada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8531fb46",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A importância de features por permutação é outra técnica para estimar a importância de cada \n",
    "# feature em um modelo de Random Forest, medindo a mudança no desempenho do modelo quando os valores \n",
    "# da feature são aleatoriamente embaralhados.\n",
    "\n",
    "from sklearn.inspection import permutation_importance\n",
    "\n",
    "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "result = permutation_importance(rf, X_test, y_test, n_repeats=10, random_state=42)\n",
    "\n",
    "perm_importances = result.importances_mean\n",
    "perm_std = result.importances_std\n",
    "sorted_idx = perm_importances.argsort()\n",
    "feature_names = X_test.columns\n",
    "\n",
    "pd.DataFrame({'Importance': perm_importances, 'Std': perm_std}, \\\n",
    "             index=feature_names[sorted_idx]).sort_values('Importance',ascending=True)\n",
    "\n",
    "# Ainda não temos uma indicação da direção da relação entre a feature e o alvo com este método."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8c6ca46",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SHAP é um método para interpretar a saída de modelos de machine learning com base na teoria dos jogos.\n",
    "import time\n",
    "inicio = time.time()\n",
    "! pip install shap\n",
    "# python.exe -m pip install --upgrade pip\n",
    "fim = time.time()\n",
    "tempo = fim - inicio\n",
    "print(f'\\ntempo de execução: {tempo} segundos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40b215e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import shap\n",
    "\n",
    "explainer = shap.Explainer(rf)\n",
    "shap_values = explainer(X_train)\n",
    "shap.plots.beeswarm(shap_values)\n",
    "\n",
    "# identifica as features q tem impacto positivo nas previsões\n",
    "# Mais álcool está associado a um vinho de qualidade superior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fbebf4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# outra forma de entender como cada feature contribui para as previsões da Random Forest é observar \n",
    "# os caminhos percorridos por cada instância\n",
    "\n",
    "from treeinterpreter import treeinterpreter as ti\n",
    "prediction, bias, contributions = ti.predict(rf, X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2990395-3ba5-4c1f-9393-69ad7e137dbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4aeb45e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotando a importância global da feature, calculando a média das contribuições de cada feature em todas as instâncias\n",
    "pd.Series(np.mean(contributions, axis=0), index=X_train.columns).sort_values(ascending=True).plot.barh(color='green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "710bae54-15ba-4783-a484-251e2bc9e3d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Para saber como cada feature contribui para o valor da previsão para uma instância específica para explicar pq o modelo\n",
    "# faz uma determinada previsão\n",
    "prediction, bias, contributions = ti.predict(rf, X_test)\n",
    "pd.Series(contributions[0], index=X_test.columns).sort_values(ascending=True).plot.barh(color='orange')\n",
    "\n",
    "# Para esta instância, a quantidade de álcool está diminuindo o valor da previsão, enquanto a quantidade de sulfatos está aumentando."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3eb5bca-8a3d-409f-adb2-03068591879d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
